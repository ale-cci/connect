name: Go Release

on:
  push:
    branches:
    - master
    tags:
    - 'v*.*.*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Run tests
      run: go test ./...

    - name: Get current version
      id: get_version
      run: |
        VERSION=$(git describe --tags --always)
        if [[ $VERSION == "" ]]; then
          # Fallback if no tags are found, use commit hash
          VERSION=$(git rev-parse --short HEAD)
        fi
        CURRENT_TAG=$(git describe --tags --always --abbrev=0)
        echo "CURRENT_VERSION=$VERSION" >> $GITHUB_ENV
        echo "CURRENT_TAG=$CURRENT_TAG" >> $GITHUB_ENV

    - name: Build for Linux (amd64)
      run: GOOS=linux GOARCH=amd64 go build -ldflags="-X main.version=${{ env.CURRENT_VERSION }}" -o connect-linux-amd64 cmd/connect/main.go

    - name: Build for Linux (arm64)
      run: GOOS=linux GOARCH=arm64 go build -ldflags="-X main.version=${{ env.CURRENT_VERSION }}" -o connect-linux-arm64 cmd/connect/main.go

    - name: Build for macOS (amd64)
      run: GOOS=darwin GOARCH=amd64 go build -ldflags="-X main.version=${{ env.CURRENT_VERSION }}" -o connect-darwin-amd64 cmd/connect/main.go

    - name: Build for macOS (arm64)
      run: GOOS=darwin GOARCH=arm64 go build -ldflags="-X main.version=${{ env.CURRENT_VERSION }}" -o connect-darwin-arm64 cmd/connect/main.go

    - name: Create release
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      run:
        |
          gh release create "${{env.CURRENT_TAG}}" \
            --title="${{env.CURRENT_VERSION}}" \
            --generate-notes \
            --verify-tag \
            connect-linux-* \
            connect-darwin-*
